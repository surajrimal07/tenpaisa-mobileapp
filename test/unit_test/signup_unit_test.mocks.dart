// Mocks generated by Mockito 5.4.4 from annotations
// in paisa/test/unit_test/signup_unit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i3;
import 'package:flutter/material.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:paisa/config/router/navigation_service.dart' as _i9;
import 'package:paisa/core/failure/failure.dart' as _i7;
import 'package:paisa/feathures/auth/domain/entity/auth_entity.dart' as _i8;
import 'package:paisa/feathures/auth/domain/repository/auth_repository.dart'
    as _i2;
import 'package:paisa/feathures/auth/domain/usecase/add_user_usecase.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIAuthRepository_0 extends _i1.SmartFake
    implements _i2.IAuthRepository {
  _FakeIAuthRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGlobalKey_2<T extends _i4.State<_i4.StatefulWidget>>
    extends _i1.SmartFake implements _i4.GlobalKey<T> {
  _FakeGlobalKey_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AddUserUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddUserUseCase extends _i1.Mock implements _i5.AddUserUseCase {
  @override
  _i2.IAuthRepository get userRepository => (super.noSuchMethod(
        Invocation.getter(#userRepository),
        returnValue: _FakeIAuthRepository_0(
          this,
          Invocation.getter(#userRepository),
        ),
        returnValueForMissingStub: _FakeIAuthRepository_0(
          this,
          Invocation.getter(#userRepository),
        ),
      ) as _i2.IAuthRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, bool>> addUser(
    _i8.AuthEntity? user,
    bool? remember,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addUser,
          [
            user,
            remember,
          ],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, bool>>.value(
            _FakeEither_1<_i7.Failure, bool>(
          this,
          Invocation.method(
            #addUser,
            [
              user,
              remember,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i3.Either<_i7.Failure, bool>>.value(
                _FakeEither_1<_i7.Failure, bool>(
          this,
          Invocation.method(
            #addUser,
            [
              user,
              remember,
            ],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, bool>>);
}

/// A class which mocks [NavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationService extends _i1.Mock implements _i9.NavigationService {
  @override
  _i4.GlobalKey<_i4.NavigatorState> get navigatorKey => (super.noSuchMethod(
        Invocation.getter(#navigatorKey),
        returnValue: _FakeGlobalKey_2<_i4.NavigatorState>(
          this,
          Invocation.getter(#navigatorKey),
        ),
        returnValueForMissingStub: _FakeGlobalKey_2<_i4.NavigatorState>(
          this,
          Invocation.getter(#navigatorKey),
        ),
      ) as _i4.GlobalKey<_i4.NavigatorState>);

  @override
  dynamic routeTo(
    String? route, {
    dynamic arguments,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #routeTo,
          [route],
          {#arguments: arguments},
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic routeToAndReplaceAll(
    String? route, {
    dynamic arguments,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #routeToAndReplaceAll,
          [route],
          {#arguments: arguments},
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic routeToAndReplace(
    String? route, {
    dynamic arguments,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #routeToAndReplace,
          [route],
          {#arguments: arguments},
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic routeToAndRemoveUntil(
    String? route, {
    dynamic arguments,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #routeToAndRemoveUntil,
          [route],
          {#arguments: arguments},
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic routeToAndRemoveUntilWithRoute(
    String? route,
    String? route2, {
    dynamic arguments,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #routeToAndRemoveUntilWithRoute,
          [
            route,
            route2,
          ],
          {#arguments: arguments},
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic routeToAndRemoveUntilWithRouteAndReplace(
    String? route,
    String? route2, {
    dynamic arguments,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #routeToAndRemoveUntilWithRouteAndReplace,
          [
            route,
            route2,
          ],
          {#arguments: arguments},
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic routeToAndRemoveUntilWithRouteAndReplaceAll(
    String? route,
    String? route2, {
    dynamic arguments,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #routeToAndRemoveUntilWithRouteAndReplaceAll,
          [
            route,
            route2,
          ],
          {#arguments: arguments},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void popToFirst() => super.noSuchMethod(
        Invocation.method(
          #popToFirst,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
