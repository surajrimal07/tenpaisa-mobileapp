// Mocks generated by Mockito 5.4.4 from annotations
// in paisa/test/unit_test/stocks_unit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:paisa/core/common/cache/stocks_cache.dart' as _i3;
import 'package:paisa/core/failure/failure.dart' as _i7;
import 'package:paisa/feathures/home/domain/entity/stock_entity.dart' as _i8;
import 'package:paisa/feathures/home/domain/repository/stock_repository.dart'
    as _i2;
import 'package:paisa/feathures/home/domain/usecase/stock_usecase.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIStockRepository_0 extends _i1.SmartFake
    implements _i2.IStockRepository {
  _FakeIStockRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStockCache_1 extends _i1.SmartFake implements _i3.StockCache {
  _FakeStockCache_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_2<L, R> extends _i1.SmartFake implements _i4.Either<L, R> {
  _FakeEither_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetStockUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetStockUseCase extends _i1.Mock implements _i5.GetStockUseCase {
  @override
  _i2.IStockRepository get stockRepository => (super.noSuchMethod(
        Invocation.getter(#stockRepository),
        returnValue: _FakeIStockRepository_0(
          this,
          Invocation.getter(#stockRepository),
        ),
        returnValueForMissingStub: _FakeIStockRepository_0(
          this,
          Invocation.getter(#stockRepository),
        ),
      ) as _i2.IStockRepository);

  @override
  _i3.StockCache get stockCache => (super.noSuchMethod(
        Invocation.getter(#stockCache),
        returnValue: _FakeStockCache_1(
          this,
          Invocation.getter(#stockCache),
        ),
        returnValueForMissingStub: _FakeStockCache_1(
          this,
          Invocation.getter(#stockCache),
        ),
      ) as _i3.StockCache);

  @override
  _i6.Future<_i4.Either<_i7.Failure, List<_i8.StockEntity>>> getAllStocks(
          bool? refresh) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllStocks,
          [refresh],
        ),
        returnValue:
            _i6.Future<_i4.Either<_i7.Failure, List<_i8.StockEntity>>>.value(
                _FakeEither_2<_i7.Failure, List<_i8.StockEntity>>(
          this,
          Invocation.method(
            #getAllStocks,
            [refresh],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i4.Either<_i7.Failure, List<_i8.StockEntity>>>.value(
                _FakeEither_2<_i7.Failure, List<_i8.StockEntity>>(
          this,
          Invocation.method(
            #getAllStocks,
            [refresh],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i7.Failure, List<_i8.StockEntity>>>);
}
