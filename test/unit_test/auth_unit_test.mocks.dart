// Mocks generated by Mockito 5.4.4 from annotations
// in paisa/test/unit_test/auth_unit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;

import 'package:dartz/dartz.dart' as _i5;
import 'package:flutter/foundation.dart' as _i7;
import 'package:flutter/src/widgets/framework.dart' as _i6;
import 'package:flutter/src/widgets/notification_listener.dart' as _i12;
import 'package:mockito/mockito.dart' as _i1;
import 'package:paisa/core/common/cache/auth_cache.dart' as _i4;
import 'package:paisa/core/failure/failure.dart' as _i10;
import 'package:paisa/core/shared_prefs/user_shared_prefs.dart' as _i3;
import 'package:paisa/feathures/auth/domain/entity/auth_entity.dart' as _i11;
import 'package:paisa/feathures/auth/domain/repository/auth_repository.dart'
    as _i2;
import 'package:paisa/feathures/auth/domain/usecase/login_user_usecase.dart'
    as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIAuthRepository_0 extends _i1.SmartFake
    implements _i2.IAuthRepository {
  _FakeIAuthRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserSharedPrefs_1 extends _i1.SmartFake
    implements _i3.UserSharedPrefs {
  _FakeUserSharedPrefs_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthCache_2 extends _i1.SmartFake implements _i4.AuthCache {
  _FakeAuthCache_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_3<L, R> extends _i1.SmartFake implements _i5.Either<L, R> {
  _FakeEither_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWidget_4 extends _i1.SmartFake implements _i6.Widget {
  _FakeWidget_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i7.DiagnosticLevel? minLevel = _i7.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeInheritedWidget_5 extends _i1.SmartFake
    implements _i6.InheritedWidget {
  _FakeInheritedWidget_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i7.DiagnosticLevel? minLevel = _i7.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_6 extends _i1.SmartFake
    implements _i7.DiagnosticsNode {
  _FakeDiagnosticsNode_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({
    _i7.TextTreeConfiguration? parentConfiguration,
    _i7.DiagnosticLevel? minLevel = _i7.DiagnosticLevel.info,
  }) =>
      super.toString();
}

/// A class which mocks [LoginUserUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginUserUseCase extends _i1.Mock implements _i8.LoginUserUseCase {
  @override
  _i2.IAuthRepository get userRepository => (super.noSuchMethod(
        Invocation.getter(#userRepository),
        returnValue: _FakeIAuthRepository_0(
          this,
          Invocation.getter(#userRepository),
        ),
        returnValueForMissingStub: _FakeIAuthRepository_0(
          this,
          Invocation.getter(#userRepository),
        ),
      ) as _i2.IAuthRepository);

  @override
  _i3.UserSharedPrefs get userSharedPrefs => (super.noSuchMethod(
        Invocation.getter(#userSharedPrefs),
        returnValue: _FakeUserSharedPrefs_1(
          this,
          Invocation.getter(#userSharedPrefs),
        ),
        returnValueForMissingStub: _FakeUserSharedPrefs_1(
          this,
          Invocation.getter(#userSharedPrefs),
        ),
      ) as _i3.UserSharedPrefs);

  @override
  _i4.AuthCache get authCache => (super.noSuchMethod(
        Invocation.getter(#authCache),
        returnValue: _FakeAuthCache_2(
          this,
          Invocation.getter(#authCache),
        ),
        returnValueForMissingStub: _FakeAuthCache_2(
          this,
          Invocation.getter(#authCache),
        ),
      ) as _i4.AuthCache);

  @override
  _i9.Future<_i5.Either<_i10.Failure, _i11.AuthEntity>> loginUser(
    String? username,
    String? password,
    bool? rememberme,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #loginUser,
          [
            username,
            password,
            rememberme,
          ],
        ),
        returnValue:
            _i9.Future<_i5.Either<_i10.Failure, _i11.AuthEntity>>.value(
                _FakeEither_3<_i10.Failure, _i11.AuthEntity>(
          this,
          Invocation.method(
            #loginUser,
            [
              username,
              password,
              rememberme,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i9.Future<_i5.Either<_i10.Failure, _i11.AuthEntity>>.value(
                _FakeEither_3<_i10.Failure, _i11.AuthEntity>(
          this,
          Invocation.method(
            #loginUser,
            [
              username,
              password,
              rememberme,
            ],
          ),
        )),
      ) as _i9.Future<_i5.Either<_i10.Failure, _i11.AuthEntity>>);
}

/// A class which mocks [BuildContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildContext extends _i1.Mock implements _i6.BuildContext {
  @override
  _i6.Widget get widget => (super.noSuchMethod(
        Invocation.getter(#widget),
        returnValue: _FakeWidget_4(
          this,
          Invocation.getter(#widget),
        ),
        returnValueForMissingStub: _FakeWidget_4(
          this,
          Invocation.getter(#widget),
        ),
      ) as _i6.Widget);

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get debugDoingBuild => (super.noSuchMethod(
        Invocation.getter(#debugDoingBuild),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i6.InheritedWidget dependOnInheritedElement(
    _i6.InheritedElement? ancestor, {
    Object? aspect,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #dependOnInheritedElement,
          [ancestor],
          {#aspect: aspect},
        ),
        returnValue: _FakeInheritedWidget_5(
          this,
          Invocation.method(
            #dependOnInheritedElement,
            [ancestor],
            {#aspect: aspect},
          ),
        ),
        returnValueForMissingStub: _FakeInheritedWidget_5(
          this,
          Invocation.method(
            #dependOnInheritedElement,
            [ancestor],
            {#aspect: aspect},
          ),
        ),
      ) as _i6.InheritedWidget);

  @override
  void visitAncestorElements(_i6.ConditionalElementVisitor? visitor) =>
      super.noSuchMethod(
        Invocation.method(
          #visitAncestorElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void visitChildElements(_i6.ElementVisitor? visitor) => super.noSuchMethod(
        Invocation.method(
          #visitChildElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispatchNotification(_i12.Notification? notification) =>
      super.noSuchMethod(
        Invocation.method(
          #dispatchNotification,
          [notification],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.DiagnosticsNode describeElement(
    String? name, {
    _i7.DiagnosticsTreeStyle? style = _i7.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeElement,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_6(
          this,
          Invocation.method(
            #describeElement,
            [name],
            {#style: style},
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_6(
          this,
          Invocation.method(
            #describeElement,
            [name],
            {#style: style},
          ),
        ),
      ) as _i7.DiagnosticsNode);

  @override
  _i7.DiagnosticsNode describeWidget(
    String? name, {
    _i7.DiagnosticsTreeStyle? style = _i7.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeWidget,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_6(
          this,
          Invocation.method(
            #describeWidget,
            [name],
            {#style: style},
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_6(
          this,
          Invocation.method(
            #describeWidget,
            [name],
            {#style: style},
          ),
        ),
      ) as _i7.DiagnosticsNode);

  @override
  List<_i7.DiagnosticsNode> describeMissingAncestor(
          {required Type? expectedAncestorType}) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeMissingAncestor,
          [],
          {#expectedAncestorType: expectedAncestorType},
        ),
        returnValue: <_i7.DiagnosticsNode>[],
        returnValueForMissingStub: <_i7.DiagnosticsNode>[],
      ) as List<_i7.DiagnosticsNode>);

  @override
  _i7.DiagnosticsNode describeOwnershipChain(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeOwnershipChain,
          [name],
        ),
        returnValue: _FakeDiagnosticsNode_6(
          this,
          Invocation.method(
            #describeOwnershipChain,
            [name],
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_6(
          this,
          Invocation.method(
            #describeOwnershipChain,
            [name],
          ),
        ),
      ) as _i7.DiagnosticsNode);
}
